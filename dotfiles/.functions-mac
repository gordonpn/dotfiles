#!/bin/bash

# open quicklook
ql() {
  qlmanage -p "$1"
}

# make gif
togif() {
  ffmpeg -i "$1" -s 1280x720 -f gif - | gifsicle --delay=2 > "$1".gif
}

# upload a file to transfer.sh
transfer() {
  wget -t 1 -qO - --method=PUT --body-file="$1" --header="Content-Type: $(file -b --mime-type "$1")" https://transfer.sh/"$(basename "$1")";
  echo
}

# browse google chrome history
chis() {
  local cols sep chrome_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    chrome_history="$HOME/Library/Application Support/Google/Chrome/Profile 1/History"
    open=open
  else
    chrome_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  yes | cp -rf "$chrome_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# Install (one or multiple) selected application(s)
bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do; brew install $prog; done;
  fi
}

# Update (one or multiple) selected application(s)
bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do; brew upgrade $prog; done;
  fi
}

# Delete (one or multiple) selected application(s)
bcp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do; brew uninstall $prog; done;
  fi
}

# gitignore.io
gi() {
  curl -sLw "\n" https://www.gitignore.io/api/\$@ ;
}

# git diff with fzf
gdf() {
  preview="git diff $@ --color=always -- {-1}"
  git diff "$@" --name-only | fzf -m --ansi --preview "$preview"
}

# git diff staged with fzf
gdsf() {
  preview="git diff $@ --color=always --staged -- {-1}"
  git diff "$@" --name-only --staged | fzf -m --ansi --preview "$preview"
}

# ripgrep all search with fzf
rga-fzf() {
	RG_PREFIX="rga --files-with-matches"
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="70%:wrap"
	)" &&
	echo "opening $file" &&
	qlmanage -p "$file"
}

# run through my local projects and see which one is behind, or has untracked files or has changes, etc
check-git() {
  for d in /Users/gordonpn/workspace/src/github.com/gordonpn/*/
  do
    (cd "$d" && \
      echo -e '\033[1;33m' && \
      pwd && \
      echo -e '\033[0m' && \
      git status --show-stash --untracked-files=all | egrep --color 'Your branch is ahead of|Changes not staged for commit|Untracked files|Changes to be committed|'\
      && echo)
  done
}

# like normal autojump when used with arguments but displays an fzf prompt when used without
j() {
    if [[ "$#" -ne 0 ]]; then
        cd $(autojump $@)
        return
    fi
    cd "$(autojump -s | sort -k1gr | awk '$1 ~ /[0-9]:/ && $2 ~ /^\// { for (i=2; i<=NF; i++) { print $(i) } }' |  fzf --height 40% --reverse --inline-info)"
}
