#!/bin/bash

# open quicklook
ql() {
  qlmanage -p "$1"
}

# upload a file to transfer.sh
transfer() {
  wget -t 1 -qO - --method=PUT --body-file="$1" --header="Content-Type: $(file -b --mime-type "$1")" https://transfer.sh/"$(basename "$1")";
  echo
}

# browse google chrome history
chis() {
  local cols sep chrome_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    chrome_history="$HOME/Library/Application Support/Google/Chrome/Profile 1/History"
    open=open
  else
    chrome_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  yes | cp -rf "$chrome_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# Install (one or multiple) selected application(s)
bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo "$inst");
    do; brew install "$prog"; done;
  fi
}

# Update (one or multiple) selected application(s)
bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo "$upd");
    do; brew upgrade "$prog"; done;
  fi
}

# Delete (one or multiple) selected application(s)
bcp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo "$uninst");
    do; brew uninstall "$prog"; done;
  fi
}

# git diff with fzf
gdf() {
  preview="git diff $* --color=always -- {-1}"
  git diff "$@" --name-only | fzf -m --ansi --preview "$preview"
}

# git diff staged with fzf
gdsf() {
  preview="git diff $@ --color=always --staged -- {-1}"
  git diff "$@" --name-only --staged | fzf -m --ansi --preview "$preview"
}

# ripgrep all search with fzf
rga-fzf() {
	RG_PREFIX="rga --files-with-matches"
	local file
	file="$(
		FZF_DEFAULT_COMMAND="$RG_PREFIX '$1'" \
			fzf --sort --preview="[[ ! -z {} ]] && rga --pretty --context 5 {q} {}" \
				--phony -q "$1" \
				--bind "change:reload:$RG_PREFIX {q}" \
				--preview-window="70%:wrap"
	)" &&
	echo "opening $file" &&
	qlmanage -p "$file"
}

# run through my local projects and see which one is behind, or has untracked files or has changes, etc
check-git() {
  CURRENT_DIR=$(pwd)
  for d in /Users/gordonpn/workspace/*/
  do
    cd "$d" || continue
    NO_CHANGE=$(git status --show-stash --untracked-files=all | grep -q -e 'Your branch is ahead of' -e 'Changes not staged for commit' -e 'Untracked files' -e 'Changes to be committed' -e 'You have unmerged paths'; echo $?)
    HAS_CHANGE=$(git status --show-stash --untracked-files=all | grep -q -e 'nothing to commit, working tree clean'; echo $?)
    if [ "${NO_CHANGE}" -eq "0" ]; then
      echo -e '\033[1;33m' && pwd && echo -e '\033[0m'
      git status --show-stash --untracked-files=all
    fi
  done
  cd "${CURRENT_DIR}" || exit
}

# like normal autojump when used with arguments but displays an fzf prompt when used without
j() {
    if [[ "$#" -ne 0 ]]; then
        cd "$(autojump "$@")" || exit
        return
    fi
    cd "$(autojump -s | sort -k1gr | awk '$1 ~ /[0-9]:/ && $2 ~ /^\// { for (i=2; i<=NF; i++) { print $(i) } }' |  fzf --height 40% --reverse --inline-info)" || exit
}

# time zsh startup for debugging
timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time "$shell" -i -c exit; done
}

# check md5 hash of file with string
cmd5() {
  file_hash=$(md5 -q "$1")
  if [ "$file_hash" = "$2" ]; then
    echo "Hashes are equal"
  else
    echo "Hashes are not equal"
  fi
}

# check sha1 hash of file with string
csha1() {
  file_hash=$(shasum "$1")
  if [ "${file_hash%% *}" = "$2" ]; then
    echo "Hashes are equal"
  else
    echo "Hashes are not equal"
  fi
}

# check sha256 hash of file with string
csha256() {
  file_hash=$(sha256sum "$1")
  if [ "${file_hash%% *}" = "$2" ]; then
    echo "Hashes are equal"
  else
    echo "Hashes are not equal"
  fi
}

# Quickly update zsh plugins, chrome extensions, brew
sysup() {
  "$DOTFILES_ROOT"/update-repos.sh
  brew update
  brew upgrade
  brew doctor
  brew cleanup
  echo
  xcode-select --install
  echo
  sudo softwareupdate --list
  echo
}

# Allows switching JDKs quickly
# e.g. jdk 1.8, jdk 11, jdk 15
jdk() {
  if [ "$1" -eq 0 ]; then
    /usr/libexec/java_home -V
  else
    version=$1
    unset JAVA_HOME;
    NEW_JAVA_HOME=$(/usr/libexec/java_home -v"$version")
    export JAVA_HOME="$NEW_JAVA_HOME";
    java -version
  fi
}

# After updating pyenv and/or pipx through Homebrew, it often breaks some configuration
# So this quick function fixes that
pyfix() {
  pyenv rehash
  pipx reinstall-all
}

# Use fzf to list and select virtualenv to activate
activate-venv() {
  local selected_env
  selected_env=$(ls ~/.virtualenvs/ --colour=never --no-icons | fzf)

  if [ -n "$selected_env" ]; then
    source "$HOME/.venv/$selected_env/bin/activate"
  fi
}

# Use fzf to display current open PRs to checkout
pr-checkout() {
  local jq_template pr_number

  jq_template='"'\
'#\(.number) - \(.title)'\
'\t'\
'Author: \(.user.login)\n'\
'Created: \(.created_at)\n'\
'Updated: \(.updated_at)\n\n'\
'\(.body)'\
'"'

  pr_number=$(
    gh api 'repos/:owner/:repo/pulls' |
    jq ".[] | $jq_template" |
    sed -e 's/"\(.*\)"/\1/' -e 's/\\t/\t/' |
    fzf \
      --with-nth=1 \
      --delimiter='\t' \
      --preview='echo -e {2}' \
      --preview-window=top:wrap |
    sed 's/^#\([0-9]\+\).*/\1/'
  )

  if [ -n "$pr_number" ]; then
    gh pr checkout "$pr_number"
  fi
}
