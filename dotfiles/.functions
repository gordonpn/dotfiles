# rename a file if mv is only given one argument
function mv() {
  if [ "$#" -ne 1 ] || [ ! -e "$1" ]; then
    command mv "$@"
    return
  fi

  read -eir "$1" newfilename
  command mv -v -- "$1" "$newfilename"
}

# find pip dependencies
pip-dependencies() {
  PACKAGE=$1
  pip download $PACKAGE -d /tmp --no-binary :all: \
    | grep Collecting \
    | cut -d' ' -f2 \
    | grep -Ev "$PACKAGE(~|=|\!|>|<|$)"
}

# open quicklook
ql() {
  qlmanage -p "$1"
}

# make gif
togif() {
  ffmpeg -i "$1" -s 1280x720 -f gif - | gifsicle --delay=2 > "$1".gif
}

# copy directory and cd to it
cpcd() {
  if [ -d "$2" ];then
    cp "$1" "$2" && (cd "$2" || exit)
  else
    cp "$1" "$2"
  fi
}

# move directory and cd to it
mvcd() {
  if [ -d "$2" ];then
    mv "$1" "$2" && (cd "$2" || exit)
  else
    mv "$1" "$2"
  fi
}

# git clone and cd into it
gccd() {
  REPO=$1
  CLONEPATH=$2

  if [ -z "$CLONEPATH" ]; then
      CLONEPATH=${$(basename "$1")/.git/}
  fi

  git clone "$REPO" $CLONEPATH
  cd $CLONEPATH || exit
}

# upload a file to transfer.sh
transfer() {
  wget -t 1 -qO - --method=PUT --body-file="$1" --header="Content-Type: $(file -b --mime-type "$1")" https://transfer.sh/"$(basename "$1")";
  echo
}

# browse google chrome history
chis() {
  local cols sep chrome_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    chrome_history="$HOME/Library/Application Support/Google/Chrome/Profile 1/History"
    open=open
  else
    chrome_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  yes | cp -rf "$chrome_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# Install (one or multiple) selected application(s)
bip() {
  local inst=$(brew search | fzf -m)

  if [[ $inst ]]; then
    for prog in $(echo $inst);
    do; brew install $prog; done;
  fi
}

# Update (one or multiple) selected application(s)
bup() {
  local upd=$(brew leaves | fzf -m)

  if [[ $upd ]]; then
    for prog in $(echo $upd);
    do; brew upgrade $prog; done;
  fi
}

# Delete (one or multiple) selected application(s)
bcp() {
  local uninst=$(brew leaves | fzf -m)

  if [[ $uninst ]]; then
    for prog in $(echo $uninst);
    do; brew uninstall $prog; done;
  fi
}

# look for a process to kill
fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo "$pid" | xargs kill -${1:-9}
    fi
}

# cd to selected parent directory
fcdp() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs "$(realpath "${1:-$PWD}")" | fzf-tmux --tac)
  cd "$DIR" || exit
}

# cd to selected directory
fcd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir" || exit
}

# like normal autojump when used with arguments but displays an fzf prompt when used without
j() {
    if [[ "$#" -ne 0 ]]; then
        cd $(autojump $@)
        return
    fi
    cd "$(autojump -s | sort -k1gr | awk '$1 ~ /[0-9]:/ && $2 ~ /^\// { for (i=2; i<=NF; i++) { print $(i) } }' |  fzf --height 40% --reverse --inline-info)"
}

# gitignore.io
gi() {
  curl -sLw "\n" https://www.gitignore.io/api/\$@ ;
}

# git diff with fzf
gdf() {
  preview="git diff $@ --color=always -- {-1}"
  git diff "$@" --name-only | fzf -m --ansi --preview "$preview"
}

pd() {
  ag --hidden --ignore .git -f -g "" --depth=1 | fzf -m --ansi --preview 'bat --style=numbers --color=always {} | head -100'
}
