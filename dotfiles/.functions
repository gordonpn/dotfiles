#!/bin/bash

# rename a file if mv is only given one argument
function mv() {
  if [ "$#" -ne 1 ] || [ ! -e "$1" ]; then
    command mv "$@"
    return
  fi

  read -eir "$1" newfilename
  command mv -v -- "$1" "$newfilename"
}

# find pip dependencies
pip-dependencies() {
  PACKAGE=$1
  pip download "$PACKAGE" -d /tmp --no-binary :all: \
    | grep Collecting \
    | cut -d' ' -f2 \
    | grep -Ev "$PACKAGE(~|=|\!|>|<|$)"
}

# copy directory and cd to it
cpcd() {
  if [ -d "$2" ];then
    cp "$1" "$2" && (cd "$2" || exit)
  else
    cp "$1" "$2"
  fi
}

# move directory and cd to it
mvcd() {
  if [ -d "$2" ];then
    mv "$1" "$2" && (cd "$2" || exit)
  else
    mv "$1" "$2"
  fi
}

# git clone and cd into it
gccd() {
  REPO=$1
  CLONEPATH=$2

  if [ -z "$CLONEPATH" ]; then
      CLONEPATH=${$(basename "$1")/.git/}
  fi

  git clone "$REPO" $CLONEPATH
  cd $CLONEPATH || exit
}

# look for a process to kill
fkill() {
    local pid
    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo "$pid" | xargs kill -${1:-9}
    fi
}

# cd to selected parent directory
fcdp() {
  local declare dirs=()
  get_parent_dirs() {
    if [[ -d "${1}" ]]; then dirs+=("$1"); else return; fi
    if [[ "${1}" == '/' ]]; then
      for _dir in "${dirs[@]}"; do echo $_dir; done
    else
      get_parent_dirs $(dirname "$1")
    fi
  }
  local DIR=$(get_parent_dirs "$(realpath "${1:-$PWD}")" | fzf-tmux --tac)
  cd "$DIR" || exit
}

# cd to selected directory
fcd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir" || exit
}

# preview files in directory with fzf
pd() {
  ag --hidden --ignore .git -f -g "" --depth=1 | fzf -m --ansi --preview 'bat --style=numbers --color=always {} | head -100'
}

# override pip to install packages globally
gpip(){
  PIP_REQUIRE_VIRTUALENV="" pip "$@"
}
